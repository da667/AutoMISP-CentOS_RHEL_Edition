########################################
#Configuration variables you should confirm before running:
#You can modify these if you like, but the defaults are actually sensible.
#Please note if you plan on generating your own password, to avoid special characters, as they can make the script behave in unpredictable ways.
########################################
#MISP_USER: a local non-root user for MISP access. We will be creating this username via the adduser command

#MISP_PASSWORD: a password for the MISP user. This password will be assigned to the MISP_USER account specified above.
#The default password is a 32-character alphanumeric string randomly generated by openSSL on script startup.
#If you plan on changing this, please avoid special characters, because shell scripts behave erratically when they are used. This password can be changed later via the passwd command

#PATH_TO_MISP:where MISP is gonna be installed.

#WWW_USER:the user that gets installed/owns the apache process. in RHEL/CentOS, this is normally "apache"

#FQDN: the fully qualified domain name of your misp server. defaults to setting the hostname of your system to misp.local

#MISP_BASEURL: this is a config setting for MISP. the default is for this to be blank.

#MISP_LIVE: a config setting for MISP to set your MISP instance to active. valid options are 1 or 0. The default is 1

#DBHOST: you can specify where your database is hosted. more often than not, this is going to be localhost.

#DBNAME: the name of the database we'll be using for MISP.

#DBUSER_ADMIN: the name of the admin user for the MISP database. most of the time, this is root.

#DBPASSWORD_ADMIN: the password for the database admin.
#The default password is a 32-character alphanumeric string randomly generated by openSSL on script startup.
#If you want to change this, avoid special characters, because shell scripts behave erratically when they are used. This password can be changed later via the mysqladmin command

#DBUSER_MISP: the database user for managing the MISP database specifically. defaults to misp

#DBPASSWORD_MISP: the password for the misp database user.
#The default password is a 32-character alphanumeric string randomly generated by openSSL on script startup.
#If you want to change this, avoid special characters, because shell scripts behave erratically when they are used. This password can be changed later via the mysqladmin command

#is_redhat: this needs to be set because RHEL and CentOS have different software repos they pull from, and different ways of adding those software repos.
#if this variable is set to "1" we assume that you are installing MISP on RHEL. If set to "0" or literally any other value, we assume you're installing to CentOS or some non-RHEL yum/rpm-based distro.
#is_redhat is set to "0" by default
########################################

MISP_USER='misp'
MISP_PASSWORD="`openssl rand -hex 32`"
PATH_TO_MISP='/var/www/MISP'
WWW_USER='apache'
FQDN='misp.local'
MISP_BASEURL='""'
MISP_LIVE='1'
DBHOST='localhost'
DBNAME='misp'
DBUSER_ADMIN='root'
DBPASSWORD_ADMIN="`openssl rand -hex 32`"
DBUSER_MISP='misp'
DBPASSWORD_MISP="`openssl rand -hex 32`"
is_redhat=0

########################################
# php.ini configuration - these are parameters for determing mast filesize, memory limits, and execution time for php. These are default settings, and should be appropriate for regular use
# But if you need these settings to be bigger or smaller to suit your needs, you are free to do so.
upload_max_filesize=50M
post_max_size=50M
max_execution_time=300
memory_limit=2048M

########################################
#This determines whether or not we'll be using letsencrypt to provide SSL. the default is 0, which configures a self-signed SSL cert instead.
#Please be aware that this feature is not currently implemented and should not impact how the script operates.
use_letsencrypt='0'

########################################
#The rest of these are other variables/configurations the script uses for various purposes
#Most of these should NOT need to be modified.
########################################
# This is a default GPG key for the deployment. its not recommended that you actually use this. You can leave these options default
GPG_REAL_NAME='Autogenerated Key'
# On a REAL install, please do not set a comment, see here for why: https://www.debian-administration.org/users/dkg/weblog/97
GPG_COMMENT='WARNING: MISP AutoGenerated Key consider this Key VOID!'
GPG_EMAIL_ADDRESS='admin@admin.test'
# 3072 bits used as per suggestions here: https://riseup.net/en/security/message-security/openpgp/best-practices
GPG_KEY_LENGTH='3072'
GPG_PASSPHRASE="`openssl rand -hex 32`"

########################################
#sets the path to cakePHP, which MISP uses extensively. This is the default configuration and should not need to be changed
CAKE="$PATH_TO_MISP/app/Console/cake"

########################################
#These are variables for running various php commands through the script, and for referring to the location of the php.ini file.
#CentOS/RHEL don't have php7.X in their default repos, so we have to use the scl repos, and they require special invocations to actually do things.
#These variables should NOT need to be modified.
RUN_PHP="/usr/bin/scl enable rh-php72"
PHP_INI="/etc/opt/rh/rh-php72/php.ini"

########################################
#This variable defines where/how to invoke python for the purpose of configuring python settings, virtual environment, etc. necessary for various parts of MISP
#Just like with PHP above, the default repos use a pretty old version of python, so we grab the version available via the SCL repos.
#This variable should NOT need to be modified
RUN_PYTHON='/usr/bin/scl enable rh-python36'

########################################
#These are sudo statements to ensure that either the misp user or the webserver user (apache) owns particular files/directories and starts certain services.
SUDO_USER="sudo -H -u ${MISP_USER}"
SUDO_WWW="sudo -H -u ${WWW_USER} "

#set the umask. this should default to 0022
UMASK=`umask`

########################################
#selinux_status
#we need to know whether or not selinux is enabled.
#this governs whether or not we'll be doing selinux adjustments later.
selinux_status=`sestatus | head -1 | awk '{print $3}'`